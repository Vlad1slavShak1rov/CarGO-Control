// <auto-generated />
using System;
using CarGO_Control.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarGO_Control.Migrations
{
    [DbContext(typeof(CarGoDBContext))]
    [Migration("20241121143042_CarGoDB")]
    partial class CarGoDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("CarGO_Control.DataBase.Cargo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CargoType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Contents")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Weight")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("Cargos");
                });

            modelBuilder.Entity("CarGO_Control.DataBase.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Experience")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserID")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("CarGO_Control.DataBase.Operator", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Operators");
                });

            modelBuilder.Entity("CarGO_Control.DataBase.Roles", b =>
                {
                    b.Property<int?>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("RoleID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("CarGO_Control.DataBase.Route", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CityFrom")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CityTo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataIn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataOut")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DriverID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("IDCarGo")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("IDTruck")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RouteHTTP")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TrackNumer")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("DriverID")
                        .IsUnique();

                    b.HasIndex("IDCarGo")
                        .IsUnique();

                    b.HasIndex("IDTruck")
                        .IsUnique();

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("CarGO_Control.DataBase.Truck", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CarMake")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DriverID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("DriverID")
                        .IsUnique();

                    b.ToTable("Trucks");
                });

            modelBuilder.Entity("CarGO_Control.DataBase.Users", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("RoleID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("RoleID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CarGO_Control.DataBase.Driver", b =>
                {
                    b.HasOne("CarGO_Control.DataBase.Users", "Users")
                        .WithOne("Driver")
                        .HasForeignKey("CarGO_Control.DataBase.Driver", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CarGO_Control.DataBase.Operator", b =>
                {
                    b.HasOne("CarGO_Control.DataBase.Users", "User")
                        .WithOne("Operator")
                        .HasForeignKey("CarGO_Control.DataBase.Operator", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarGO_Control.DataBase.Route", b =>
                {
                    b.HasOne("CarGO_Control.DataBase.Driver", "Driver")
                        .WithOne("Routes")
                        .HasForeignKey("CarGO_Control.DataBase.Route", "DriverID");

                    b.HasOne("CarGO_Control.DataBase.Cargo", "Cargo")
                        .WithOne("Route")
                        .HasForeignKey("CarGO_Control.DataBase.Route", "IDCarGo");

                    b.HasOne("CarGO_Control.DataBase.Truck", "Truck")
                        .WithOne("Route")
                        .HasForeignKey("CarGO_Control.DataBase.Route", "IDTruck");

                    b.Navigation("Cargo");

                    b.Navigation("Driver");

                    b.Navigation("Truck");
                });

            modelBuilder.Entity("CarGO_Control.DataBase.Truck", b =>
                {
                    b.HasOne("CarGO_Control.DataBase.Driver", "Driver")
                        .WithOne("Trucks")
                        .HasForeignKey("CarGO_Control.DataBase.Truck", "DriverID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("CarGO_Control.DataBase.Users", b =>
                {
                    b.HasOne("CarGO_Control.DataBase.Roles", "Roles")
                        .WithMany("Users")
                        .HasForeignKey("RoleID");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("CarGO_Control.DataBase.Cargo", b =>
                {
                    b.Navigation("Route")
                        .IsRequired();
                });

            modelBuilder.Entity("CarGO_Control.DataBase.Driver", b =>
                {
                    b.Navigation("Routes")
                        .IsRequired();

                    b.Navigation("Trucks")
                        .IsRequired();
                });

            modelBuilder.Entity("CarGO_Control.DataBase.Roles", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CarGO_Control.DataBase.Truck", b =>
                {
                    b.Navigation("Route")
                        .IsRequired();
                });

            modelBuilder.Entity("CarGO_Control.DataBase.Users", b =>
                {
                    b.Navigation("Driver")
                        .IsRequired();

                    b.Navigation("Operator")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
